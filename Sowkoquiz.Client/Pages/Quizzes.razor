@page "/quizzes"
@using Sowkoquiz.Grpc
@using Sowkoquiz.Components
@inject SearchService.SearchServiceClient SearchService
@inject IJSRuntime JsRuntime

<PageTitle>Quizzes</PageTitle>

@if (IsLoading)
{
    <div class="flex justify-center items-center mt-8">
        <div class="loader"></div>
    </div>
}
else
{
    <div class="container mx-auto p-4">
        <div class="flex justify-center mb-6">
            <input type="text" @bind="SearchTerm" placeholder="Type to search..." class="w-full max-w-lg p-2 border border-gray-300 rounded-l-md"/>
            <button @onclick="OnSearch" class="p-2 bg-blue-500 text-white rounded-r-md">Search</button>
        </div>

        <div class="quiz-list grid-cols grid auto-rows-fr grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 mt-6">
            @foreach (var quiz in QuizzesData)
            {
                <QuizTile Quiz="quiz"/>
            }
        </div>

        <div class="flex justify-between items-center mt-6">
            <button @onclick="PreviousPage" class="p-2 text-gray-500 hover:text-gray-700" disabled="@IsPreviousDisabled">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                </svg>
            </button>
            <span class="px-6 py-5 text-xs font-medium text-gray-500 tracking-wider text-center">Page @CurrentPage of @MaxPages</span>
            <button @onclick="NextPage" class="p-2 text-gray-500 hover:text-gray-700" disabled="@IsNextDisabled">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
            </button>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery(Name = "searchTerm")]
    public string? SearchTerm { get; set; } = string.Empty;

    [SupplyParameterFromQuery(Name = "page")]
    public int? CurrentPage { get; set; } = 1;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    private List<SearchQuizResponse.Types.Quiz> QuizzesData { get; set; } = [];
    private int PageSize { get; set; }
    private int TotalCount { get; set; }
    private int MaxPages => (int)Math.Ceiling((double)TotalCount / PageSize);
    private bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        PageSize = await CalculatePageSize();
        await LoadQuizzes();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadQuizzes();
    }

    private async Task<int> CalculatePageSize()
    {
        return await JsRuntime.InvokeAsync<int>("calculatePageSize");
    }

    private async Task LoadQuizzes()
    {
        if (CurrentPage is null or <= 0)
        {
            CurrentPage = 1;
            UpdateQuery();
            return;
        }
            
        
        var response = await SearchService.SearchQuizAsync(new SearchQuizRequest
        {
            Take = PageSize,
            Skip = (CurrentPage - 1) * PageSize,
            SearchTerm = SearchTerm ?? string.Empty,
        });

        QuizzesData = response.Quiz.ToList();
        TotalCount = response.Total;
        
        IsLoading = false;
        StateHasChanged();
    }

    private void OnSearch()
    {
        CurrentPage = 1;
        UpdateQuery();
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            UpdateQuery();
        }
    }

    private void NextPage()
    {
        if (CurrentPage < MaxPages)
        {
            CurrentPage++;
            UpdateQuery();
        }
    }

    private void UpdateQuery()
    {
        var query = new Dictionary<string, object?>
        {
            { "searchTerm", SearchTerm },
            { "page", CurrentPage.ToString() }
        };

        var uri = NavigationManager.GetUriWithQueryParameters(query);
        NavigationManager.NavigateTo(uri);
    }

    private bool IsPreviousDisabled => CurrentPage == 1;
    private bool IsNextDisabled => CurrentPage >= MaxPages;
}