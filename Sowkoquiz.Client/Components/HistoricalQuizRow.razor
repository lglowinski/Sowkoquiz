@using Blazored.Modal.Services
@using Sowkoquiz.Constants
@using Sowkoquiz.Grpc
@inject QuizService.QuizServiceClient QuizServiceClient
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<tr class="transition duration-150 ease-in-out hover:bg-gray-50" @onclick="GoToDetails">
    <td class="px-6 py-6 lg:whitespace-nowrap text-sm font-medium overflow-hidden text-gray-900 text-overflow-ellipsis" title="@Id">
        @Id
    </td>
    <td class="px-6 py-6 lg:whitespace-nowrap text-sm text-gray-500 overflow-hidden text-overflow-ellipsis" title="@Title">
        @Title
    </td>
    <td class="px-6 py-6 lg:whitespace-nowrap text-sm text-gray-500 overflow-hidden text-overflow-ellipsis" title="@Status">
        @Status
    </td>
    <td class="px-6 py-6 lg:whitespace-nowrap text-sm text-gray-500 overflow-hidden text-overflow-ellipsis" title="@EndTime.ToString("dd.MM.yyyy HH:mm")">
        @EndTime.ToString("dd-MM-yyyy HH:mm")
    </td>
    <td class="px-6 py-6 lg:whitespace-nowrap text-sm text-gray-500 overflow-hidden text-overflow-ellipsis">
        <button @onclick:stopPropagation="true" @onclick="ShowDeleteConfirmation" class="text-red-500 hover:text-red-700 transition duration-150 ease-in-out">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 6l3 1m0 0h12l3-1m-15 1v10a2 2 0 002 2h8a2 2 0 002-2V7m-10 0v4m0-4v4m0 0h4m-4 0h4"></path>
            </svg>
        </button>
    </td>
</tr>

@code {
    [Parameter]
    public int Id { get; set; }
    
    [Parameter]
    public string Title { get; set; }
    
    [Parameter]
    public string Status { get; set; }
    
    [Parameter]
    public DateTime EndTime { get; set; }
    [Parameter] 
    public EventCallback OnQuizDeleted { get; set; }
    
    [Inject] 
    public NavigationManager NavigationManager { get; set; } = null!;
    
    [CascadingParameter] 
    public IModalService Modal { get; set; } = default!;

    protected override void OnInitialized()
    {
        EndTime = EndTime.ToLocalTime();
    }
    
    private void GoToDetails()
    {
        NavigationManager.NavigateTo($"/details/{Id}");
    }
    
    private async Task ShowDeleteConfirmation()
    {
        var modal = Modal.Show<DeleteConfirmation>();

        var result = await modal.Result;

        if (result.Confirmed)
            await ConfirmDeleteQuiz();
    }
    
    private async Task ConfirmDeleteQuiz()
    {
        var key = await GetKey();
        await QuizServiceClient.DeleteUserQuizAsync(new DeleteUserQuizRequest { Id = Id, AccessKey = key});
        //NavigationManager.Refresh();

        await OnQuizDeleted.InvokeAsync();
    }

    private async Task<string> GetKey()
    {
        var key = await LocalStorage.GetItemAsync<string>(LocalStorageKeys.AccessKey);

        return key;
    }
}