@using Blazored.Modal.Services
@using Sowkoquiz.Constants
@using Sowkoquiz.Grpc
@inject QuizService.QuizServiceClient QuizServiceClient
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<tr class="transition duration-150 ease-in-out hover:bg-gray-50" @onclick="GoToDetails">
    <td class="col-title px-6 py-6 lg:whitespace-nowrap text-sm text-gray-500 overflow-hidden text-overflow-ellipsis" title="@Title">
        @Title
    </td>
    <td class="col-status px-6 py-6 lg:whitespace-nowrap text-sm text-gray-500 overflow-hidden text-overflow-ellipsis" title="@Status">
        @Status
    </td>
    <td class="col-end-time px-6 py-6 lg:whitespace-nowrap text-sm text-gray-500 overflow-hidden text-overflow-ellipsis" title="@EndTime.ToString("dd.MM.yyyy HH:mm")">
        @EndTime.ToString("dd-MM-yyyy HH:mm")
    </td>
    <td class="col-actions px-6 py-6 lg:whitespace-nowrap text-sm text-gray-500 overflow-hidden text-overflow-ellipsis">
        <button @onclick:stopPropagation="true" @onclick="ShowDeleteConfirmation" class="text-red-500 hover:text-red-700 transition duration-150 ease-in-out">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="m20.25 7.5-.625 10.632a2.25 2.25 0 0 1-2.247 2.118H6.622a2.25 2.25 0 0 1-2.247-2.118L3.75 7.5m6 4.125 2.25 2.25m0 0 2.25 2.25M12 13.875l2.25-2.25M12 13.875l-2.25 2.25M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125Z" />
            </svg>
        </button>
    </td>
</tr>
@code {
    [Parameter]
    public int Id { get; set; }
    
    [Parameter]
    public string Title { get; set; }
    
    [Parameter]
    public string Status { get; set; }
    
    [Parameter]
    public DateTime EndTime { get; set; }
    [Parameter] 
    public EventCallback OnQuizDeleted { get; set; }
    
    [Inject] 
    public NavigationManager NavigationManager { get; set; } = null!;
    
    [CascadingParameter] 
    public IModalService Modal { get; set; } = default!;

    protected override void OnInitialized()
    {
        EndTime = EndTime.ToLocalTime();
    }
    
    private void GoToDetails()
    {
        NavigationManager.NavigateTo($"/details/{Id}");
    }
    
    private async Task ShowDeleteConfirmation()
    {
        var modal = Modal.Show<DeleteConfirmation>();

        var result = await modal.Result;

        if (result.Confirmed)
            await ConfirmDeleteQuiz();
    }
    
    private async Task ConfirmDeleteQuiz()
    {
        var key = await GetKey();
        await QuizServiceClient.DeleteUserQuizAsync(new DeleteUserQuizRequest { Id = Id, AccessKey = key});

        await OnQuizDeleted.InvokeAsync();
    }

    private async Task<string> GetKey()
    {
        var key = await LocalStorage.GetItemAsync<string>(LocalStorageKeys.AccessKey);

        return key;
    }
}